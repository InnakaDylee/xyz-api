// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "xyz/modules/consumer/domain"

	mock "github.com/stretchr/testify/mock"
)

// ConsumerQueryRepositoryInterface is an autogenerated mock type for the ConsumerQueryRepositoryInterface type
type ConsumerQueryRepositoryInterface struct {
	mock.Mock
}

// GetConsumerByID provides a mock function with given fields: consumerID
func (_m *ConsumerQueryRepositoryInterface) GetConsumerByID(consumerID string) (domain.Consumer, error) {
	ret := _m.Called(consumerID)

	if len(ret) == 0 {
		panic("no return value specified for GetConsumerByID")
	}

	var r0 domain.Consumer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Consumer, error)); ok {
		return rf(consumerID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Consumer); ok {
		r0 = rf(consumerID)
	} else {
		r0 = ret.Get(0).(domain.Consumer)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(consumerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsumerByUserID provides a mock function with given fields: userID
func (_m *ConsumerQueryRepositoryInterface) GetConsumerByUserID(userID int) (domain.Consumer, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetConsumerByUserID")
	}

	var r0 domain.Consumer
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (domain.Consumer, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) domain.Consumer); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(domain.Consumer)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConsumerQueryRepositoryInterface creates a new instance of ConsumerQueryRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumerQueryRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumerQueryRepositoryInterface {
	mock := &ConsumerQueryRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
