// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "xyz/modules/limit/domain"

	mock "github.com/stretchr/testify/mock"
)

// LimitQueryRepositoryInterface is an autogenerated mock type for the LimitQueryRepositoryInterface type
type LimitQueryRepositoryInterface struct {
	mock.Mock
}

// GetLimitByConsumerId provides a mock function with given fields: consumerId
func (_m *LimitQueryRepositoryInterface) GetLimitByConsumerId(consumerId string) ([]domain.Limit, error) {
	ret := _m.Called(consumerId)

	if len(ret) == 0 {
		panic("no return value specified for GetLimitByConsumerId")
	}

	var r0 []domain.Limit
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Limit, error)); ok {
		return rf(consumerId)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Limit); ok {
		r0 = rf(consumerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Limit)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(consumerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLimitById provides a mock function with given fields: limitId
func (_m *LimitQueryRepositoryInterface) GetLimitById(limitId string) (domain.Limit, error) {
	ret := _m.Called(limitId)

	if len(ret) == 0 {
		panic("no return value specified for GetLimitById")
	}

	var r0 domain.Limit
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Limit, error)); ok {
		return rf(limitId)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Limit); ok {
		r0 = rf(limitId)
	} else {
		r0 = ret.Get(0).(domain.Limit)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(limitId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLimitQueryRepositoryInterface creates a new instance of LimitQueryRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLimitQueryRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LimitQueryRepositoryInterface {
	mock := &LimitQueryRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
