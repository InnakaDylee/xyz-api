// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "xyz/modules/limit/domain"

	mock "github.com/stretchr/testify/mock"
)

// LimitCommandRepositoryInterface is an autogenerated mock type for the LimitCommandRepositoryInterface type
type LimitCommandRepositoryInterface struct {
	mock.Mock
}

// CreateLimit provides a mock function with given fields: limit
func (_m *LimitCommandRepositoryInterface) CreateLimit(limit domain.Limit) (domain.Limit, error) {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for CreateLimit")
	}

	var r0 domain.Limit
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Limit) (domain.Limit, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(domain.Limit) domain.Limit); ok {
		r0 = rf(limit)
	} else {
		r0 = ret.Get(0).(domain.Limit)
	}

	if rf, ok := ret.Get(1).(func(domain.Limit) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLimit provides a mock function with given fields: limit
func (_m *LimitCommandRepositoryInterface) UpdateLimit(limit domain.Limit) (domain.Limit, error) {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLimit")
	}

	var r0 domain.Limit
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Limit) (domain.Limit, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(domain.Limit) domain.Limit); ok {
		r0 = rf(limit)
	} else {
		r0 = ret.Get(0).(domain.Limit)
	}

	if rf, ok := ret.Get(1).(func(domain.Limit) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLimitCommandRepositoryInterface creates a new instance of LimitCommandRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLimitCommandRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LimitCommandRepositoryInterface {
	mock := &LimitCommandRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
